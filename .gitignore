# C
## Prerequisites
*.d

## Object files
*.o
*.ko
*.obj
*.elf

## Linker output
*.ilk
### (reserved) *.map
*.exp

## Precompiled Headers
*.gch
*.pch

## Libraries
*.lib
### (reserved) *.a
*.la
*.lo

## Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

## Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

## Debug files
*.dSYM/
*.su
*.idb
*.pdb

## Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf



# C++<!DOCTYPE html>
<html>

<head>
  <title>RobotGPT</title>
  <!-- Add Material-UI CSS -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
  <style>
    /* Override Materialize default button color to use Material-UI blue color */
    .btn,
    .btn-large {
      background-color: #007bff;
    }
  </style>
</head>

<body>
  <div class="container">
    <h1>RobotGPT</h1>
    <p>Click the "Start Recording" button and speak your command. Then click the "Stop Recording" button to convert it
      to speech. Finally, click the "Send to Robot" button to send the voice command to the robot.</p>
    <a id="startBtn" class="btn-large waves-effect waves-light" onclick="startRecording()">Start Recording</a>
    <a id="stopBtn" class="btn-large waves-effect waves-light" onclick="stopRecording()">Stop Recording</a>
    <a id="sendBtn" class="btn-large waves-effect waves-light" onclick="sendToRobot()">Send to Robot</a>
    <div id="output" class="flow-text"></div>
  </div>

  <!-- Add Material-UI JS -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

  <script>
    // Global variables
    let recognition;
    let outputDiv;

    // Initialize the Web Speech API
    function initialize() {
      recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.interimResults = true;
      recognition.continuous = true;
      recognition.lang = 'en-US';

      recognition.onresult = function (event) {
        let interimTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; ++i) {
          if (event.results[i].isFinal) {
            // Append final transcript to output div
            outputDiv.innerHTML += '<p>' + event.results[i][0].transcript + '</p>';
          } else {
            // Append interim transcript to output div
            interimTranscript += event.results[i][0].transcript;
          }
        }

        // Display interim transcript in output div
        outputDiv.innerHTML = interimTranscript;
      };

      recognition.onerror = function (event) {
        console.error('Recognition error:', event.error);
      };
    }

 // Start recording
    function startRecording() {
      outputDiv = document.getElementById('output');
      outputDiv.innerHTML = '';
      recognition.start();
    }

    // Stop recording
    function stopRecording() {
      recognition.stop();
    }
    

    // Speak the given text
function speak(text) {
  let utterance = new SpeechSynthesisUtterance(text);
  // Initialize the TTS engine
    let tts_engine = new SpeechSynthesisUtterance();
    tts_engine.text = text//"Message received. Sending to ChatGPT.";
    window.speechSynthesis.speak(tts_engine);

  tts_engine.speak(utterance.text);
}
// Send to robot
async function sendToRobot() {
  let command = outputDiv.innerHTML;

  // Send the voice command to the robot for further processing
  try {
    let response = await fetch("http://192.168.191.147:5000/rosgpt", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
     
      body: new URLSearchParams({
        text_command: command
      }),
    });

    let jsonResponse = await response.json();
    console.log("Received response from robot:", jsonResponse);
    outputDiv.innerHTML += '<p>Robot response: ' + jsonResponse.response + '</p>';
    speak("Robot response: " + jsonResponse.response);
  } catch (error) {
    console.error("Error sending command to robot:", error);
  }
}

// Initialize the app
window.onload = function () {
  initialize();
};
  </script>
</body>
</html>
## Prerequisites
*.dpp

## Compiled Object files
*.slo

## Fortran module files
*.smod

## Compiled Static libraries
*.lai



# Python
## Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

## Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
### (reserved) lib/
### (reserved) lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

## PyInstaller
##  Usually these files are written by a python script from a template
##  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

## Installer logs
pip-log.txt
pip-delete-this-directory.txt

## Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

## Translations
*.mo
*.pot

## Django stuff:
*.log
local_settings.py
db.sqlite3

## Flask stuff:
instance/
.webassets-cache

## Scrapy stuff:
.scrapy

## Sphinx documentation
docs/_build/

## PyBuilder
target/

## Jupyter Notebook
.ipynb_checkpoints

## pyenv
.python-version

## celery beat schedule file
celerybeat-schedule

## SageMath parsed files
*.sage.py

## Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

## Spyder project settings
.spyderproject
.spyproject

## Rope project settings
.ropeproject

## mkdocs documentation
/site

## mypy
.mypy_cache/



# Java
## Compiled class file
*.class

## Log file
*.log

## BlueJ files
*.ctxt

## Mobile Tools for Java (J2ME)
.mtj.tmp/

## Package Files
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

## virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*



# Android
## Built application files
*.apk
*.ap_

## Files for the ART/Dalvik VM
*.dex

## Generated files
bin/
gen/
out/

## Gradle files
.gradle/
build/

## Local configuration file (sdk path, etc)
local.properties

## Proguard folder generated by Eclipse
proguard/

## Android Studio Navigation editor temp files
.navigation/

## Android Studio captures folder
captures/

## IntelliJ
*.iml
.idea/workspace.xml
.idea/tasks.xml
.idea/gradle.xml
.idea/assetWizardSettings.xml
.idea/dictionaries
.idea/libraries
.idea/caches

## Keystore files
# Uncomment the following line if you do not want to check your keystore files in.
*.jks

## External native build folder generated in Android Studio 2.2 and later
.externalNativeBuild

## Google Services (e.g. APIs or Firebase)
google-services.json

## Freeline
freeline.py
freeline/
freeline_project_description.json

## fastlane
fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots
fastlane/test_output
fastlane/readme.md



# CUDA
*.i
*.ii
*.gpu
*.ptx
*.cubin
*.fatbin



# CMAKE
CMakeCache.txt
CMakeFiles
CMakeScripts
Testing
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake



# QT
## Qt-es
object_script.*.Release
object_script.*.Debug
*_plugin_import.cpp
/.qmake.cache
/.qmake.stash
*.pro.user
*.pro.user.*
*.qbs.user
*.qbs.user.*
*.moc
moc_*.cpp
moc_*.h
qrc_*.cpp
ui_*.h
*.qmlc
*.jsc
### (reserved) Makefile*
*build-*

## Qt unit tests
target_wrapper.*

## QtCreator
*.autosave

## QtCreator Qml
*.qmlproject.user
*.qmlproject.user.*

## QtCreator CMake
CMakeLists.txt.user*



# ETC.
## Ignore generated docs
*.dox
*.wikidoc

## doxygen
doc/

## IDE: vscode
.vscode/

## IDE: Emacs
.#*

## IDE: VIM
*.swp

## Setting files

log/

install/